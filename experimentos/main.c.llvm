/* main.c com suporte LLVM */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "llvm_codegen.h"

extern int yyparse(void);
extern FILE *yyin;

// Flag global para modo de execução
typedef enum {
    MODE_INTERPRET,  // Execução interpretada padrão
    MODE_LLVM_IR,    // Geração de IR LLVM
    MODE_LLVM_EXEC   // Geração e execução LLVM
} ExecutionMode;

static ExecutionMode exec_mode = MODE_INTERPRET;

int main(int argc, char **argv) {
    // Verificar opções de linha de comando
    int file_arg_idx = 1;
    
    if (argc > 1 && argv[1][0] == '-') {
        if (strcmp(argv[1], "--llvm") == 0 || strcmp(argv[1], "-l") == 0) {
            exec_mode = MODE_LLVM_IR;
            file_arg_idx = 2;
        } else if (strcmp(argv[1], "--llvm-exec") == 0 || strcmp(argv[1], "-x") == 0) {
            exec_mode = MODE_LLVM_EXEC;
            file_arg_idx = 2;
        } else if (strcmp(argv[1], "--help") == 0 || strcmp(argv[1], "-h") == 0) {
            printf("Uso: %s [opção] [arquivo]\n", argv[0]);
            printf("Opções:\n");
            printf("  -l, --llvm      Gera código LLVM IR\n");
            printf("  -x, --llvm-exec Gera e executa código LLVM\n");
            printf("  -h, --help      Mostra esta ajuda\n");
            printf("\nSe nenhum arquivo for especificado, lê da entrada padrão.\n");
            return EXIT_SUCCESS;
        } else {
            fprintf(stderr, "Opção desconhecida: %s\n", argv[1]);
            fprintf(stderr, "Use --help para ver as opções disponíveis.\n");
            return EXIT_FAILURE;
        }
    }
    
    // Configurar entrada
    if (argc > file_arg_idx) {
        yyin = fopen(argv[file_arg_idx], "r");
        if (!yyin) {
            perror(argv[file_arg_idx]);
            return EXIT_FAILURE;
        }
    } else {
        yyin = stdin;
    }
    
    // Executar parser
    if (yyparse() == 0) {
        printf("Programa analisado com sucesso!\n");
        
        if (exec_mode == MODE_LLVM_EXEC) {
            printf("Executando código LLVM gerado...\n");
            int result = execute_llvm_ir();
            if (result != 0) {
                fprintf(stderr, "Erro na execução do código LLVM\n");
                return EXIT_FAILURE;
            }
        } else if (exec_mode == MODE_LLVM_IR) {
            printf("Código LLVM IR gerado em 'output.ll'\n");
        }
        
        return EXIT_SUCCESS;
    } else {
        printf("Erro de compilação!\n");
        return EXIT_FAILURE;
    }
}
