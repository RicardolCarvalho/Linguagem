# Makefile com suporte para LLVM

CC      = gcc
CFLAGS  = -Wall -g
LDFLAGS = -lfl
LEX     = flex
YACC    = bison
YFLAGS  = -d

# Alvos
TARGET  = peixe
TARGET_LLVM = peixe_llvm

# Arquivos padrão
OBJS    = lex.yy.o parser.tab.o main.o

# Arquivos com suporte LLVM
OBJS_LLVM = lex.yy.o parser.tab.o llvm_codegen.o main_llvm.o

all: $(TARGET) $(TARGET_LLVM)

parser.tab.c parser.tab.h: parser.y
	$(YACC) $(YFLAGS) parser.y

lex.yy.c: lexer.l parser.tab.h
	$(LEX) lexer.l

# Arquivo principal padrão
main.o: main.c
	$(CC) $(CFLAGS) -c main.c

# Arquivo principal com suporte LLVM
main_llvm.o: main_llvm.c
	$(CC) $(CFLAGS) -c main_llvm.c

# Parser
parser.tab.o: parser.tab.c
	$(CC) $(CFLAGS) -c parser.tab.c

# Lexer
lex.yy.o: lex.yy.c
	$(CC) $(CFLAGS) -c lex.yy.c

# Código de geração LLVM
llvm_codegen.o: llvm_codegen.c llvm_codegen.h
	$(CC) $(CFLAGS) -c llvm_codegen.c

# Compilação do executável padrão
$(TARGET): $(OBJS)
	$(CC) $(CFLAGS) -o $(TARGET) $(OBJS) $(LDFLAGS)

# Compilação do executável com suporte LLVM
$(TARGET_LLVM): $(OBJS_LLVM)
	$(CC) $(CFLAGS) -o $(TARGET_LLVM) $(OBJS_LLVM) $(LDFLAGS)

# Limpeza
clean:
	rm -f $(TARGET) $(TARGET_LLVM) *.o lex.yy.c parser.tab.c parser.tab.h output.ll

test: $(TARGET) $(TARGET_LLVM)
	@echo "\n=== Teste Interpretado ==="
	./$(TARGET) teste.pesca
	@echo "\n=== Teste com LLVM (geração de IR) ==="
	./$(TARGET_LLVM) --llvm teste.pesca
	@echo "\n=== Teste com LLVM (execução) ==="
	./$(TARGET_LLVM) --llvm-exec teste.pesca

.PHONY: all clean test
